<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/main.css">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <meta name="msapplication-TileColor" content="#006fff">
    <meta name="theme-color" content="#006fff">
    <title>CamViewerPlus</title>
</head>

<body>
    {{#if keepAwake }}
    <video autoplay="{{{ keepAwake }}}" width="10" height="10" style="position: absolute; top: -10px; left: -10px;" loop="loop"><source src="/assets/muted-blank.mp4" type="video/mp4"><source src="/assets/muted-blank.ogv" type="video/ogg"></video>
    {{/if}}
    <script src="/js/jquery.min.js"></script>
    <script src="{{{ scriptUrl }}}"></script>
    <button class="cta">
        <i class="bi bi-info gear-icon bi-expand"></i>
        <span class="button-text">
            <i class="bi bi-gear gear-icon pe-2 showSettings" title="Settings"></i>
            <i class="bi bi-arrows-angle-expand gear-icon ps-2 toggleFullscreen" title="Enter fullscreen"></i>
        </span>
    </button>
    <div id="settings" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Settings</h4>
                    <button type="button" class="close-btn closeSettings" data-dismiss="modal" aria-label="Close">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <h5>Selected Grid</h5>
                    <select id="gridType">
                    </select>
                    <h5 class="mt-3">Keep Screen Awake</h5>
                    <select id="keepAwake">
                    </select>
                </div>
                <div class="modal-footer fs-6">
                    <span><img src="assets/thornhill.png" class="thornhill-logo pe-2" title="A Thornhill Corporation project.">CamViewerPlus v{{{version}}} by Fanman03</span>
                    <button type="button" class="btn btn-secondary closeSettings" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    {{{body}}}
    <script>
        const streamPort = {{{ streamPort }}};

        {{#if keepAwake}}
        const keepAwake = {{{ keepAwake }}};
        {{else}}
        const keepAwake = true;
        {{/if}}


        const availableGrids = [{{{ availableGrids }}}].sort(function (a, b) {
            if (a === Infinity)
                return 1;
            else if (isNaN(a))
                return -1;
            else
                return a - b;
        });
        const thisGrid = {{{ thisGrid }}};

        $(document).ready(function () {

            if (keepAwake == true) {
                $('#keepAwake').append('<option value="true" selected>Yes</option>');
                $('#keepAwake').append('<option value="false">No</option>');
            } else {
                $('#keepAwake').append('<option value="true">Yes</option>');
                $('#keepAwake').append('<option value="false" selected>No</option>');
            }
        });

        $('#keepAwake').on('change', function () {
            window.location.href = window.location.href + "setConfig/keepAwake/" + this.value;
        });

        $("canvas").each(function () {
            let thisId = $(this).data("id");
            let thisCanvas = document.querySelector('[data-id="' + thisId + '"]');
            let thisNotInit = true;
            let wsString = 'ws://' + location.hostname + ':' + streamPort + '/api/stream/' + thisId;

            let testWs = new WebSocket(wsString);
            
            $(this).width($(this).data("width") + "vw");
            $(this).height($(this).data("height") + "vh");

            setTimeout(function() {
                showError(thisCanvas);
            }, 4000)

            testWs.onmessage  = function() {
                if(thisNotInit){
                    let thisPlayer = new JSMpeg.Player(
                        wsString,
                        {
                        canvas: thisCanvas,
                        audio: false,
                        chunkSize: 1280 * 720,
                        }
                    );

                    $(this).attr("data-expanded", "false");
                    thisNotInit = false;
                } else {
                    testWs.close();
                }
            };
        });

        function showError(canvas) {
            try{
                var ctx = canvas.getContext("2d");
                ctx.fillStyle = "black";
                ctx.fillRect(0,0,canvas.width,canvas.height);
                const x = canvas.width / 2;

                ctx.strokeStyle = "#50525e";
                let path = new Path2D("M0 5a2 2 0 0 1 2-2h7.5a2 2 0 0 1 1.983 1.738l3.11-1.382A1 1 0 0 1 16 4.269v7.462a1 1 0 0 1-1.406.913l-3.111-1.382A2 2 0 0 1 9.5 13H2a2 2 0 0 1-2-2V5zm11.5 5.175 3.5 1.556V4.269l-3.5 1.556v4.35zM2 4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h7.5a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H2z");
                ctx.translate(134, 55);
                ctx.scale(2, 2);
                ctx.stroke(path);
                ctx.resetTransform();

                ctx.beginPath();
                ctx.arc(x, 70, 25, 0, 2 * Math.PI);
                ctx.moveTo(132,53);
                ctx.lineTo(165,90);
                ctx.lineWidth = 1.5;
                ctx.stroke();

                ctx.fillStyle = "#50525e";
                ctx.textAlign = 'center';
                ctx.font = "12px Segoe UI";
                ctx.fillText("No camera assigned", x, 110);
            } catch {

            }
        }

        $("canvas").click(function () {
            if ($(this).attr("data-expanded") === 'true') {
                $(this).attr("style", "");
                $(this).width($(this).data("width") + "vw");
                $(this).height($(this).data("height") + "vh");
                $(this).attr("data-expanded", "false");
            } else {
                $(this).attr("style", "position: fixed; top: 0; left: 0; height: 100vh; width: 100vw;")
                $(this).attr("data-expanded", "true");
            }
        });

        $(".showSettings").click(function () {
            $("#settings").show();
        });

        $(".toggleFullscreen").click(function () {
            if ((screen.availHeight || screen.height - 30) <= window.innerHeight) {
                document.exitFullscreen();
                $(".toggleFullscreen").addClass("bi-arrows-angle-expand");
                $(".toggleFullscreen").removeClass("bi-arrows-angle-contract");
                $(".toggleFullscreen").attr("title", "Enter fullscreen");
            } else {
                document.documentElement.requestFullscreen();
                $(".toggleFullscreen").removeClass("bi-arrows-angle-expand");
                $(".toggleFullscreen").addClass("bi-arrows-angle-contract");
                $(".toggleFullscreen").attr("title", "Leave fullscreen");
            }
        });

        $(".closeSettings").click(function () {
            $("#settings").hide();
        });

        availableGrids.forEach((e) => {
            if (e === thisGrid) {
                $('#gridType').append('<option value="' + e + '" selected>' + e + '</option>');
            } else {
                $('#gridType').append('<option value="' + e + '">' + e + '</option>');
            }
        });

        $('#gridType').on('change', function () {
            window.location.href = window.location.href + "setConfig/gridType/" + this.value;
        });

        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })
    </script>
</body>

</html>